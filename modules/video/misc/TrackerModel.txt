@startuml
package "TrackerModel package" #DDDDDD {

enum TrackerSamplerType{
	TRACKER_STATE_ESTIMATOR_BOOSTING
	TRACKER_STATE_ESTIMATOR_SVM
}

class Typedef << (T,#FF7700) >>{
	ConfidenceMap
	Trajectory
}

class TrackerModel{
	-vector<ConfidenceMap> confidenceMaps;
	-Trajectory trajectory;
	-Ptr<TrackerStateEstimator> stateEstimator;
	...
	TrackerModel();
	~TrackerModel();
	+bool setTrackerStateEstimator(Ptr<TrackerStateEstimator> trackerStateEstimator);
	+void modelEstimation(const vector<Mat>& responses, ConfidenceMap& confidenceMap);
	+void modelUpdate(ConfidenceMap& confidenceMap);
	+void setLastTargetState(const TrackerTargetState lastTargetState);
	+void runStateEstimator();
	+void run(const vector<Mat>& responses, ConfidenceMap& confidenceMap);
	+const vector<ConfidenceMap>& getConfidenceMaps();
	+const ConfidenceMap& getLastConfidenceMap();
}
class TrackerTargetState <<virtual>>{
	Point2f targetPosition;
	---
	Point2f getTargetPosition();
	void setTargetPosition(Point2f position);
}
class TrackerTargetState 
note bottom: Each tracker can create own state

class TrackerStateEstimator <<virtual>>{
	~TrackerStateEstimator();
	Ptr<TrackerStateEstimator> create(const String& trackeStateEstimatorType);
	TrackerTargetState estimate(const vector<ConfidenceMap>& confidenceMaps);
}

class TrackerStateEstimatorSVM{
	TrackerStateEstimatorSVM()
	~TrackerStateEstimatorSVM()
	TrackerTargetState estimate(const vector<ConfidenceMap>& confidenceMaps);
}
class TrackerStateEstimatorBoosting{
	TrackerStateEstimatorBoosting()
	~TrackerStateEstimatorBoosting()
	TrackerTargetState estimate(const vector<ConfidenceMap>& confidenceMaps);
}

TrackerModel -> TrackerStateEstimator: create
TrackerModel *-- TrackerTargetState
TrackerStateEstimator <|-- TrackerStateEstimatorBoosting
TrackerStateEstimator <|-- TrackerStateEstimatorSVM
}
@enduml